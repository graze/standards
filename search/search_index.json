{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Graze Coding Standards \u00b6 This document describes the coding standards of Graze across its common languages to be adhered to and enforced by the Graze tech team, any violation of standards must be justified by the developer and exceptions are allowed for cases where it is unavoidable, such as in the case of third-party integrations. The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119 . General \u00b6 Indent size MUST be 4 space characters and MUST NOT be the tab character. All files MUST end with a blank new line (the new line character). All files MUST use the Unix LF (linefeed) line ending. There MUST NOT be trailing whitespace. Git \u00b6 Repo names SHOULD be all lowercase with hyphens (-) to separate words where appropriate. Internal-only libraries SHOULD be prefixed with \"graze-\". It is RECOMMENDED to follow the style guide mantained in agis-/git-style-guide . Languages \u00b6 PHP HTML Javascript Python SQL CSS/Less Markdown Golang Open Source \u00b6 Project PHP Infrastructure \u00b6 AWS Docker Visual \u00b6 Images","title":"Home"},{"location":"#graze-coding-standards","text":"This document describes the coding standards of Graze across its common languages to be adhered to and enforced by the Graze tech team, any violation of standards must be justified by the developer and exceptions are allowed for cases where it is unavoidable, such as in the case of third-party integrations. The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119 .","title":"Graze Coding Standards"},{"location":"#general","text":"Indent size MUST be 4 space characters and MUST NOT be the tab character. All files MUST end with a blank new line (the new line character). All files MUST use the Unix LF (linefeed) line ending. There MUST NOT be trailing whitespace.","title":"General"},{"location":"#git","text":"Repo names SHOULD be all lowercase with hyphens (-) to separate words where appropriate. Internal-only libraries SHOULD be prefixed with \"graze-\". It is RECOMMENDED to follow the style guide mantained in agis-/git-style-guide .","title":"Git"},{"location":"#languages","text":"PHP HTML Javascript Python SQL CSS/Less Markdown Golang","title":"Languages"},{"location":"#open-source","text":"Project PHP","title":"Open Source"},{"location":"#infrastructure","text":"AWS Docker","title":"Infrastructure"},{"location":"#visual","text":"Images","title":"Visual"},{"location":"infrastructure/AWS/","text":"AWS \u00b6 DNS Names \u00b6 DNS Records MUST adhere to the following pattern (instance).aws_service.(az).(region).service.environment.namespace instance SHALL be used in the case that there are multiple instances of an aws_service, e.g. seperate databases. aws_service MUST refer to the specific AWS service that is being used, the correct name of a AWS service MUST be as specified as in the Boto3 Library . az OPTIONALLY can refer to a specific Availability Zone. This may indicate a design problem in the service. region OPTIONALLY can refer to a specific region. service MUST refer to the specific service. environment MUST refer to the environment the service is deployed into ( dev , stage , test , live ). namespace MUST be a valid TLD. Example DNS Records: exampledb.rds.eu-west-1.example-service.environment.example.com elasticache.us-west-1.second-service.environment.example.com Object Names in AWS \u00b6 The name of an Object in AWS must convey the same information at the DNS record, however availability zone and region SHOULD NOT be included as this information is conveyed by interaction with the object. The Object name is ordered naturally so that it is read from left to right (inverse of the DNS name). By convention the namespace is assumed to be the standard TLD. Exceptions MAY be made for third party services. Objects MUST be UpperCamelCase and acronyms MUST be Capitalised. Example Object Names: EnvironmentExampleServiceRDSExampleDB EnvironmentSecondServiceElastiCache ThirdPartyLiveMonitoringEC2","title":"AWS"},{"location":"infrastructure/AWS/#aws","text":"","title":"AWS"},{"location":"infrastructure/AWS/#dns-names","text":"DNS Records MUST adhere to the following pattern (instance).aws_service.(az).(region).service.environment.namespace instance SHALL be used in the case that there are multiple instances of an aws_service, e.g. seperate databases. aws_service MUST refer to the specific AWS service that is being used, the correct name of a AWS service MUST be as specified as in the Boto3 Library . az OPTIONALLY can refer to a specific Availability Zone. This may indicate a design problem in the service. region OPTIONALLY can refer to a specific region. service MUST refer to the specific service. environment MUST refer to the environment the service is deployed into ( dev , stage , test , live ). namespace MUST be a valid TLD. Example DNS Records: exampledb.rds.eu-west-1.example-service.environment.example.com elasticache.us-west-1.second-service.environment.example.com","title":"DNS Names"},{"location":"infrastructure/AWS/#object-names-in-aws","text":"The name of an Object in AWS must convey the same information at the DNS record, however availability zone and region SHOULD NOT be included as this information is conveyed by interaction with the object. The Object name is ordered naturally so that it is read from left to right (inverse of the DNS name). By convention the namespace is assumed to be the standard TLD. Exceptions MAY be made for third party services. Objects MUST be UpperCamelCase and acronyms MUST be Capitalised. Example Object Names: EnvironmentExampleServiceRDSExampleDB EnvironmentSecondServiceElastiCache ThirdPartyLiveMonitoringEC2","title":"Object Names in AWS"},{"location":"infrastructure/Docker/","text":"Docker \u00b6 Based on the Docker guidelines General \u00b6 A .dockerignore file SHOULD be used - This will ensure the amount of data sent to the docker daemon will be minimal. Each container SHOULD have a single concern. Dockerfile \u00b6 Multi-line arguments SHOULD be sorted. The number of layers SHOULD be kept to a minimum. A single RUN command can contain many commands: Use \\ and && for multiple commands, with && on the new line: RUN cmd \\ && cmd2 When adding build time packages, remove them in the same RUN command: RUN apk add --virtual .deps \\ gcc make \\ && make \\ && ./configure \\ && apl del .deps \\ && rm -rf /path/to/installer You SHOULD use set -xe to print commands and stop on any errors as the first command RUN set -xe \\ && do stuff \\ && tidy Multiple line LABEL s should use line-continuation characters to break lines LABEL maintainer=\"developers@graze.com\" \\ license=\"MIT\" The MAINTAINER command SHOULD NOT be used (use LABEL maintainer instead). The LICENSE command SHOULD NOT be used (use LABEL license instead). Label Schema labels SHOULD be used. If using, a org.label-schema.schema-version label MUST be defined. The vendor , name , description and vcs-url labels SHOULD be defined. LABEL org.label-schema.schema-version=\"1.0\" \\ org.label-schema.vendor=\"graze\" \\ org.label-schema.name=\"project-name\" \\ org.label-schema.description=\"project description\" \\ org.label-schema.vcs-url=\"https://github.com/graze/docker-project-name\" The vcs-ref and build-date labels SHOULD be generated. Example: ARG BUILD_DATE ARG VCS_REF LABEL org.label-schema.vcs-ref=$VCS_REF \\ org.label-schema.build-date=$BUILD_DATE This can then be injected into the image using the --build-arg argument ~$ docker build --build-arg BUILD_DATE=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\") \\ --build-arg VCS_REF=$(git rev-parse --short HEAD) \\ -t graze/project-name . COPY SHOULD be used instead of ADD for simple files. CMD SHOULD be used with the array syntax: [\"executable\", \"param1\", \"param2\", ...] . All ports SHOULD be included with EXPOSE commands. Any volumes that are mutable or user-servicable SHOULD use a VOLUME command.","title":"Docker"},{"location":"infrastructure/Docker/#docker","text":"Based on the Docker guidelines","title":"Docker"},{"location":"infrastructure/Docker/#general","text":"A .dockerignore file SHOULD be used - This will ensure the amount of data sent to the docker daemon will be minimal. Each container SHOULD have a single concern.","title":"General"},{"location":"infrastructure/Docker/#dockerfile","text":"Multi-line arguments SHOULD be sorted. The number of layers SHOULD be kept to a minimum. A single RUN command can contain many commands: Use \\ and && for multiple commands, with && on the new line: RUN cmd \\ && cmd2 When adding build time packages, remove them in the same RUN command: RUN apk add --virtual .deps \\ gcc make \\ && make \\ && ./configure \\ && apl del .deps \\ && rm -rf /path/to/installer You SHOULD use set -xe to print commands and stop on any errors as the first command RUN set -xe \\ && do stuff \\ && tidy Multiple line LABEL s should use line-continuation characters to break lines LABEL maintainer=\"developers@graze.com\" \\ license=\"MIT\" The MAINTAINER command SHOULD NOT be used (use LABEL maintainer instead). The LICENSE command SHOULD NOT be used (use LABEL license instead). Label Schema labels SHOULD be used. If using, a org.label-schema.schema-version label MUST be defined. The vendor , name , description and vcs-url labels SHOULD be defined. LABEL org.label-schema.schema-version=\"1.0\" \\ org.label-schema.vendor=\"graze\" \\ org.label-schema.name=\"project-name\" \\ org.label-schema.description=\"project description\" \\ org.label-schema.vcs-url=\"https://github.com/graze/docker-project-name\" The vcs-ref and build-date labels SHOULD be generated. Example: ARG BUILD_DATE ARG VCS_REF LABEL org.label-schema.vcs-ref=$VCS_REF \\ org.label-schema.build-date=$BUILD_DATE This can then be injected into the image using the --build-arg argument ~$ docker build --build-arg BUILD_DATE=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\") \\ --build-arg VCS_REF=$(git rev-parse --short HEAD) \\ -t graze/project-name . COPY SHOULD be used instead of ADD for simple files. CMD SHOULD be used with the array syntax: [\"executable\", \"param1\", \"param2\", ...] . All ports SHOULD be included with EXPOSE commands. Any volumes that are mutable or user-servicable SHOULD use a VOLUME command.","title":"Dockerfile"},{"location":"languages/CSS/","text":"CSS / Less \u00b6 Words in file names MUST be separated with hyphens (-). CSS3 is RECOMMENDED. Selectors MUST be in hyphen case. (.button-blue). Selectors MUST be on a single line, with a space after the last selector, followed by an opening brace. A selector MUST end with a closing brace that is un-indented and on a separate line. A blank line MUST be placed between each block of selectors. There MUST only be one property:value pair per line. CSS blocks SHOULD adhere to the CSS Property Order. There MUST always be a space after a property's colon (e.g., display: block; and not display:block;). Property declaration lines MUST end with a semi-colon. For multiple, comma-separated selectors, each selector MUST be on its own line. Attribute selectors, like input[type=\"text\"] MUST always wrap the attribute's value in double quotes, for consistency and safety. Attribute selectors MUST only be used where absolutely necessary (e.g., form controls) and MUST be avoided on custom components for performance and explicitness. Series of classes for a component MUST include a base class (e.g., .component) and use the base class as a prefix for modifier and sub-components (e.g., .component-lg).","title":"CSS/Less"},{"location":"languages/CSS/#css-less","text":"Words in file names MUST be separated with hyphens (-). CSS3 is RECOMMENDED. Selectors MUST be in hyphen case. (.button-blue). Selectors MUST be on a single line, with a space after the last selector, followed by an opening brace. A selector MUST end with a closing brace that is un-indented and on a separate line. A blank line MUST be placed between each block of selectors. There MUST only be one property:value pair per line. CSS blocks SHOULD adhere to the CSS Property Order. There MUST always be a space after a property's colon (e.g., display: block; and not display:block;). Property declaration lines MUST end with a semi-colon. For multiple, comma-separated selectors, each selector MUST be on its own line. Attribute selectors, like input[type=\"text\"] MUST always wrap the attribute's value in double quotes, for consistency and safety. Attribute selectors MUST only be used where absolutely necessary (e.g., form controls) and MUST be avoided on custom components for performance and explicitness. Series of classes for a component MUST include a base class (e.g., .component) and use the base class as a prefix for modifier and sub-components (e.g., .component-lg).","title":"CSS / Less"},{"location":"languages/Golang/","text":"Golang \u00b6 All code MUST be automatically formatted using gofmt . All code SHOULD pass the checks carried out by go lint .","title":"Golang"},{"location":"languages/Golang/#golang","text":"All code MUST be automatically formatted using gofmt . All code SHOULD pass the checks carried out by go lint .","title":"Golang"},{"location":"languages/HTML/","text":"HTML \u00b6 HTML MUST be easily readable. The following guidelines are RECOMMENDED for increasing readability. No more than one tag per line. Correct indentation. HTML SHOULD be using the HTML5 doctype. Closing slashes MUST NOT be used on void elements. (img, br etc) All tags and attributes MUST be in lowercase. All attribute values MUST be enclosed by double-quotes.","title":"HTML"},{"location":"languages/HTML/#html","text":"HTML MUST be easily readable. The following guidelines are RECOMMENDED for increasing readability. No more than one tag per line. Correct indentation. HTML SHOULD be using the HTML5 doctype. Closing slashes MUST NOT be used on void elements. (img, br etc) All tags and attributes MUST be in lowercase. All attribute values MUST be enclosed by double-quotes.","title":"HTML"},{"location":"languages/Javascript/","text":"JavaScript \u00b6 Please refer to the airbnb style guide for styling standards, in particular : Variables jQuery Commas Objects Arrays Strings Functions Immediately-invoked function expressions (IIFE) \u00b6 MUST NOT be used for CommonJS exporting modules (built with Browserify). MUST be used in inline scripts and non Browserify compiled JS to avoid populating the global scope. Example of usage in non CommonJS modules \u00b6 ( function ( $ ) { console . log ( $ ); // Defined as long as global jQuery object is available })( jQuery ); console . log ( $ ); // Undefined","title":"Javascript"},{"location":"languages/Javascript/#javascript","text":"Please refer to the airbnb style guide for styling standards, in particular : Variables jQuery Commas Objects Arrays Strings Functions","title":"JavaScript"},{"location":"languages/Javascript/#immediately-invoked-function-expressions-iife","text":"MUST NOT be used for CommonJS exporting modules (built with Browserify). MUST be used in inline scripts and non Browserify compiled JS to avoid populating the global scope.","title":"Immediately-invoked function expressions (IIFE)"},{"location":"languages/Javascript/#example-of-usage-in-non-commonjs-modules","text":"( function ( $ ) { console . log ( $ ); // Defined as long as global jQuery object is available })( jQuery ); console . log ( $ ); // Undefined","title":"Example of usage in non CommonJS modules"},{"location":"languages/Markdown/","text":"Markdown \u00b6 Markdown should conform to the base standards of markdownlint except for: MD013 - line length is up to 120 characters, and tables and code_blocks are excluded from the rule","title":"Markdown"},{"location":"languages/Markdown/#markdown","text":"Markdown should conform to the base standards of markdownlint except for: MD013 - line length is up to 120 characters, and tables and code_blocks are excluded from the rule","title":"Markdown"},{"location":"languages/PHP/","text":"PHP Standards \u00b6 All PHP code MUST adhere to the PSR-2 Coding Standard (which MUST follow the PSR-1 Coding Standard ). Short array syntax ( [] instead of array() ) MUST be used. All PHP code MUST adhere to the PSR-4 Autoloading Standard. Class names MUST be declared in UpperCamelCase. Acronyms MUST be treated as normal words. HttpException , not HTTPException . Variable names MUST be declared in camelCase. Acronyms MUST be treated as normal words. xmlHttpRequest not XMLHTTPRequest . Scripts MUST be named in camelCase describing their primary function. Non-static functions MUST NOT be called statically. Static functions MUST NOT be called non-statically. Comments SHOULD be used to provide explanation for \u201cwhy\u201d rather than \u201chow\u201d and SHOULD be used when there isn\u2019t a way to make the code simpler or self-documenting. Nested ternary operators MUST NOT be used. PHP file encoding must be UTF-8. if statements which span multiple lines should be split as follows: if ( $longVariableNameNumber1 && $longVariableNameNumber2 && $longVariableNameNumber3 && $longVariableNameNumber4 || $longVariableNameNumber5 ) { // body of control structure } There MUST NOT be any assignment or modification of variables in the expressions of if statements. if ( $response = $request -> getResponse ()) { // not allowed } Abstract class names MUST begin with Abstract . abstract class AbstractGenerator { } Interface names MUST end with Interface . interface GeneratorInterface { } 'Not' logical operators MUST NOT have whitespace between them and the subject being negated. $true = ! false ; PHP DocBlock \u00b6 DocBlock for functions / methods MUST exist where the function / method has arguments or a return value and MUST use the appropriate tags ( @param , @return ) to denote that. Developers making modifications to a function / method are tasked with ensuring that the DocBlock is up-to-date. Functions / methods / classes that are sufficiently complex (i.e. not self-documenting) SHOULD have a DocBlock explaining how to use the function / method / class. DocBlock presenting the type MUST be present for class member variables. When a description is necessary for class member variables, the DocBlock MUST be multiline: class Foo { /** @var int */ protected $id ; /** * The Bar used to fight the foo * * @var Bar */ private $bar ; } DocBlock types for scalar values MUST be one of: bool (not boolean), int (not integer), string , float (not double). DocBlock types for parameters/return values that are arrays of a single type MUST be written as: Type[] . If the variable is a multi-dimensional array, it MUST be represented with one set of [] per depth ( int[][] for an array of array of ints) If the parameter/return value is an array of several types, it MUST be described in the DocBlock as mixed[] . If the parameter/return value is an array that is sometimes empty, it MUST still be written as in 6) (NOT Type[]|[] ) example of a method's DocBlock \u00b6 /** * Foos the bars. * * @param int $barId Some number * @param Bar[] $allTheBars Collection of Bar objects * * @return string[] List of messages */ public function barFooer ( $barId , array $allTheBars ) {} Open Source \u00b6 Example skeleton project League standards Checklist All code MUST adhere to the PSR-2 and PSR-4 standards. The project MUST at least depend on the lowest supported PHP version and SHOULD depend on the latest fully supported PHP version (see versions ). The vendor name MUST be graze . The vendor namespace MUST be Graze . The project MUST contain a composer.json file. It MUST contain: The name of the project, this MUST match the name of the repository. The name of the maintainer in the authors section, along with the generic Graze Developers <developers@graze.com> author. It MUST NOT contain: The version of the project. All library code MUST be in a directory named src/ . All tests MUST be a in a directory named tests/ . The project SHOULD use Scrutinizer to check and fix standards and flag code quality issues. The project MUST be listed on Packagist.","title":"PHP"},{"location":"languages/PHP/#php-standards","text":"All PHP code MUST adhere to the PSR-2 Coding Standard (which MUST follow the PSR-1 Coding Standard ). Short array syntax ( [] instead of array() ) MUST be used. All PHP code MUST adhere to the PSR-4 Autoloading Standard. Class names MUST be declared in UpperCamelCase. Acronyms MUST be treated as normal words. HttpException , not HTTPException . Variable names MUST be declared in camelCase. Acronyms MUST be treated as normal words. xmlHttpRequest not XMLHTTPRequest . Scripts MUST be named in camelCase describing their primary function. Non-static functions MUST NOT be called statically. Static functions MUST NOT be called non-statically. Comments SHOULD be used to provide explanation for \u201cwhy\u201d rather than \u201chow\u201d and SHOULD be used when there isn\u2019t a way to make the code simpler or self-documenting. Nested ternary operators MUST NOT be used. PHP file encoding must be UTF-8. if statements which span multiple lines should be split as follows: if ( $longVariableNameNumber1 && $longVariableNameNumber2 && $longVariableNameNumber3 && $longVariableNameNumber4 || $longVariableNameNumber5 ) { // body of control structure } There MUST NOT be any assignment or modification of variables in the expressions of if statements. if ( $response = $request -> getResponse ()) { // not allowed } Abstract class names MUST begin with Abstract . abstract class AbstractGenerator { } Interface names MUST end with Interface . interface GeneratorInterface { } 'Not' logical operators MUST NOT have whitespace between them and the subject being negated. $true = ! false ;","title":"PHP Standards"},{"location":"languages/PHP/#php-docblock","text":"DocBlock for functions / methods MUST exist where the function / method has arguments or a return value and MUST use the appropriate tags ( @param , @return ) to denote that. Developers making modifications to a function / method are tasked with ensuring that the DocBlock is up-to-date. Functions / methods / classes that are sufficiently complex (i.e. not self-documenting) SHOULD have a DocBlock explaining how to use the function / method / class. DocBlock presenting the type MUST be present for class member variables. When a description is necessary for class member variables, the DocBlock MUST be multiline: class Foo { /** @var int */ protected $id ; /** * The Bar used to fight the foo * * @var Bar */ private $bar ; } DocBlock types for scalar values MUST be one of: bool (not boolean), int (not integer), string , float (not double). DocBlock types for parameters/return values that are arrays of a single type MUST be written as: Type[] . If the variable is a multi-dimensional array, it MUST be represented with one set of [] per depth ( int[][] for an array of array of ints) If the parameter/return value is an array of several types, it MUST be described in the DocBlock as mixed[] . If the parameter/return value is an array that is sometimes empty, it MUST still be written as in 6) (NOT Type[]|[] )","title":"PHP DocBlock"},{"location":"languages/PHP/#example-of-a-methods-docblock","text":"/** * Foos the bars. * * @param int $barId Some number * @param Bar[] $allTheBars Collection of Bar objects * * @return string[] List of messages */ public function barFooer ( $barId , array $allTheBars ) {}","title":"example of a method's DocBlock"},{"location":"languages/PHP/#open-source","text":"Example skeleton project League standards Checklist All code MUST adhere to the PSR-2 and PSR-4 standards. The project MUST at least depend on the lowest supported PHP version and SHOULD depend on the latest fully supported PHP version (see versions ). The vendor name MUST be graze . The vendor namespace MUST be Graze . The project MUST contain a composer.json file. It MUST contain: The name of the project, this MUST match the name of the repository. The name of the maintainer in the authors section, along with the generic Graze Developers <developers@graze.com> author. It MUST NOT contain: The version of the project. All library code MUST be in a directory named src/ . All tests MUST be a in a directory named tests/ . The project SHOULD use Scrutinizer to check and fix standards and flag code quality issues. The project MUST be listed on Packagist.","title":"Open Source"},{"location":"languages/Python/","text":"Python \u00b6 Python code SHOULD conform to the PEP 8 and PEP 257 guides. Exceptions: 160 column limit","title":"Python"},{"location":"languages/Python/#python","text":"Python code SHOULD conform to the PEP 8 and PEP 257 guides. Exceptions: 160 column limit","title":"Python"},{"location":"languages/SQL/","text":"SQL \u00b6 Query Writing \u00b6 Keywords and functions MUST be uppercase (SELECT, WHERE, MAX, AND). Column aliases MUST be lower snake_case. When the SELECT, WHERE, GROUP BY or ORDER clauses contain more than one element, they MUST be on a new line after the keyword, indented once (one indent = 4 spaces): SELECT first_name , last_name FROM users WHERE username = 'sxybill9' AND email <> 'bill@microsoft.com' When a SELECT, WHERE, GROUP BY or ORDER clause only contains one element, it MAY all be written on the same line for brevity: SELECT first_name , last_name FROM users WHERE id = 321142 When a statement is written within a string in PHP: The query MUST start on a new line, indented once. A semicolon MUST NOT be added at the end of the statement. All joins MUST be written like: INNER JOIN table_name ON condition1 AND condition2 Joins MUST NOT use the unqualified JOIN keyword. Functions MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. SELECT CONCAT ( first_name , ' ' , last_name ) full_name FROM users CASE statements MAY either be written using the previous rule or on a single line: split lines SELECT CASE WHEN gender = 'M' THEN 'male' WHEN gender = 'F' THEN 'female' ELSE 'not provided' END concisely SELECT CASE WHEN gender = 'M' THEN 'male' ELSE 'female' END FROM users Subqueries MUST be started on the next line and indented once; the opening brace MUST be on the same line as the FROM clause, and the closing brace MUST be on its own line along with the subquery alias: SELECT my_subquery . * FROM ( SELECT prenom first_name , COUNT ( * ) count_names FROM users GROUP BY prenom ) my_subquery","title":"SQL"},{"location":"languages/SQL/#sql","text":"","title":"SQL"},{"location":"languages/SQL/#query-writing","text":"Keywords and functions MUST be uppercase (SELECT, WHERE, MAX, AND). Column aliases MUST be lower snake_case. When the SELECT, WHERE, GROUP BY or ORDER clauses contain more than one element, they MUST be on a new line after the keyword, indented once (one indent = 4 spaces): SELECT first_name , last_name FROM users WHERE username = 'sxybill9' AND email <> 'bill@microsoft.com' When a SELECT, WHERE, GROUP BY or ORDER clause only contains one element, it MAY all be written on the same line for brevity: SELECT first_name , last_name FROM users WHERE id = 321142 When a statement is written within a string in PHP: The query MUST start on a new line, indented once. A semicolon MUST NOT be added at the end of the statement. All joins MUST be written like: INNER JOIN table_name ON condition1 AND condition2 Joins MUST NOT use the unqualified JOIN keyword. Functions MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. SELECT CONCAT ( first_name , ' ' , last_name ) full_name FROM users CASE statements MAY either be written using the previous rule or on a single line: split lines SELECT CASE WHEN gender = 'M' THEN 'male' WHEN gender = 'F' THEN 'female' ELSE 'not provided' END concisely SELECT CASE WHEN gender = 'M' THEN 'male' ELSE 'female' END FROM users Subqueries MUST be started on the next line and indented once; the opening brace MUST be on the same line as the FROM clause, and the closing brace MUST be on its own line along with the subquery alias: SELECT my_subquery . * FROM ( SELECT prenom first_name , COUNT ( * ) count_names FROM users GROUP BY prenom ) my_subquery","title":"Query Writing"},{"location":"open-source/OpenSource/","text":"Open Source Project Standards \u00b6 The name of the project repository MUST be all lowercase and use hyphens to separate words. The project MUST contain a README.md file. It MUST contain: A description of the project. Installation instructions. Usage instructions. License information. It SHOULD contain: Badge to show current build status. It COULD contain: Badges to show other relevant project statuses such as project version, code coverage, etc. The project MUST contain a CONTRIBUTING.md file. It MUST contain: How to report an issue. How to open a PR. The minimum requirements for a PR to be merged (testing etc). How to setup a development environment. How to run tests. The project MUST contain a LICENSE.md file. Source code SHOULD begin with a copyright message and link to the LICENSE file. The project MUST contain a CHANGELOG.md file, following the conventions laid out here: keepachangelog The project SHOULD use Travis CI to automatically run unit tests on branches and PRs. The project SHOULD use Docker for development, testing and execution.","title":"Project"},{"location":"open-source/OpenSource/#open-source-project-standards","text":"The name of the project repository MUST be all lowercase and use hyphens to separate words. The project MUST contain a README.md file. It MUST contain: A description of the project. Installation instructions. Usage instructions. License information. It SHOULD contain: Badge to show current build status. It COULD contain: Badges to show other relevant project statuses such as project version, code coverage, etc. The project MUST contain a CONTRIBUTING.md file. It MUST contain: How to report an issue. How to open a PR. The minimum requirements for a PR to be merged (testing etc). How to setup a development environment. How to run tests. The project MUST contain a LICENSE.md file. Source code SHOULD begin with a copyright message and link to the LICENSE file. The project MUST contain a CHANGELOG.md file, following the conventions laid out here: keepachangelog The project SHOULD use Travis CI to automatically run unit tests on branches and PRs. The project SHOULD use Docker for development, testing and execution.","title":"Open Source Project Standards"},{"location":"visual/Images/","text":"Images \u00b6 Words in image file names MUST be separated with hyphens (-). Images SHOULD be compressed to the smallest possible size without compromising on clarity. JPEG file format MUST be used only for an image that is or contains photography except in the case of (4). PNG file format MUST be used for any image requiring transparency.","title":"Images"},{"location":"visual/Images/#images","text":"Words in image file names MUST be separated with hyphens (-). Images SHOULD be compressed to the smallest possible size without compromising on clarity. JPEG file format MUST be used only for an image that is or contains photography except in the case of (4). PNG file format MUST be used for any image requiring transparency.","title":"Images"}]}